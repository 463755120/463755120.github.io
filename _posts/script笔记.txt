引用用单引号 ''，不然容易出错。
===:用来判断数据的类型大小是否相等。
多张图片使用抖动效果的时候，会发生图片抖动的时候回不到原来的位置，主要是你计时器的问题，如果把计时器设为内置对象的话，就会单个执行互不干扰。那样的话，鼠标每进去一次就会有个新的坐标生成所以图片位置就会改变，解决方法就是把计时器改成统一的；代码如下

var origin = parseInt(getStyle(obj,attr));
//此处把	obj.shake = setInterval(function 修改成如下，就是把计时器改成统一的，
    var shake = setInterval(function(){ 		
//因为把定时器改成了统一，所以要在定时器内重新添加getStyle函数。	
		var pos = parseInt( getStyle(obj, attr) );
        obj.style[attr] = origin + arr[num] + 'px';
        num++;
        if(num == arr.length){
		//clearInterval( obj.shake );此处为原先代码。
            clearInterval(shake);
            endFn && endFn();
        }
    },50)
	var str = '妙味课堂-WWW.miaov.com';

str.charAt(1);			// '味'
str.charCodeAt(1);			// 21619
String.fromCharCode(22937, 21619);	// '妙味'

str.indexOf('m', 4);			// 9
str.lastIndexOf('o');			// 16

'1000' < '2'			// true
'1000' > 2			// true

str.substring(0, 4);			// '妙味课堂'
str.slice(-3);			// 'com'

str.toUpperCase();			// '妙味课堂-WWW.MIAOV.COM'
str.toLowerCase();			// '妙味课堂-www.miaov.com'

str.split('.', 2);			// [ '妙味课堂-WWW', 'miaov' ] 字符串分割成一个数组。后面的参数2表示分割成几个元素，可以不写。
但是要注意的是‘ .’这个点会消失，被分割元素的逗号所代替。常用来删除元素


var arr = [ 'www', 'miaov', 'com' ];
arr.join('aaa');			// 'www.miaov.com'

var str = 'abcdef';
 alert(str.split('').reverse().join(''));
//这个是把字符串按照从大到小的顺序排列，split('')的作用是把字符串变成数组（a,b,c,d,..）然后reverse的作用是把数组倒着排，join的作用是把数组变回字符串。

splice() 方法可删除从 index 处开始的零个或多个元素，并且用参数列表中声明的一个或多个值来替换那些被删除的元素。
如果从 arrayObject 中删除了元素，则返回的是含有被删除的元素的数组。

DOM
createElement();createElement() 方法可创建元素节点
parentNode:获取父节点
appendChild(节点)			追加一个节点 例如oLi.appendChild( oA );
insertBefore(节点, 原有节点)	在已有元素前插入：oUl.insertBefore( oLi, oUl.children[0] );
就是把oLi放在每一个oUl的子节点中，这样就出来留言板的效果。
/*
				父级.removeChild(要删除的元素); 删除元素
				用当前a的父级（a的父级就是li） == this.parentNode；
				oUl.removeChild(this.parentNode);
*/

appendChild,insertBefore,replaceChild都可以操作动态创建出来的节点，也可以操作
父级.replaceChild(新节点，被替换节点) 替换子节点。：document.body.replaceChild( oDiv, oP );把oP替换成oDiv

window.open('http://www.baidu.com'); 要是添加网站，把网站名称写全，不然用close关不了。

document.documentElement.scrollTop || document.body.scrollTop;这是界面滚动条的值。一个标准，一个非标准的值。
offsetHeight = 内容可视区域的高度+ 滚动条 + 边框。
obj.offsetTop 指 obj 距离上方或上层控件的位置 offsetLeft 获取的是相对于父对象的左边距

scrollTop() 方法返回或设置匹配元素的滚动条的垂直位置。
/*
event : 事件对象 , 当一个事件发生的时候，和当前这个对象发生的这个事件有关的一些详细的信息都会被临时保存到一个指定地方-event对象，供我们在需要的调用。飞机-黑匣子

事件对象必须在一个事件调用的函数里面使用才有内容
事件函数：事件调用的函数，一个函数是不是事件函数，不在定义的决定，而是取决于这个调用的时候

兼容
ie/chrome : event是一个内置全局对象
标准下 : 事件对象是通过事件函数的第一个参数传入

如果一个函数是被事件调用的那么，这个函数定义的第一个参数就是事件对象

clientX[Y] : 当一个事件发生的时候，鼠标到页面可视区的距离    记着，XY是大写！！！！！！！！！！！！！
*/
ev.cancelBubble = true;//阻止当前对象的当前事件的冒泡
操作元素属性的第三种方式。
获取：getAttribute(名称)
设置：setAttribute(名称, 值)
删除：removeAttribute(名称)

addEventListener ;这个函数的true和false就像力穿透砖头一样，true(捕获)代表向下的力发生的时候执行fn.
false（冒泡）代表向上的力发生的时候执行fn.
//告诉div1，如果有一个出去的事件触发了你，你就去执行fn1这个函数
//告诉div1，如果有一个出去的事件触发了你，你就去执行fn1这个函数
	/*oDiv1.addEventListener('click', fn1, false);
	
//告诉div1，如果有一个进去的事件触发了你，你就去执行fn1这个函数
	/*oDiv1.addEventListener('click', fn1, true);	
	事件的撤销; removeEventListener('click', fn1, true);
/*document.addEventListener('contextmenu', function(ev) {
		
		ev.preventDefault();
		//return false;
	});*//这个就是说如果事件使用ddEventListener绑定，那么就不能使用return false 来解除绑定。得使用事件中的ev.preventDefault();
	
	
	/*
	ie/chrome : onmousewheel
		event.wheelDelta
			上：120
			下：-120
		
	firefox : DOMMouseScroll 必须用addEventListener
		event.detail
			上：-3
			下：3
			
	return false阻止的是  obj.on事件名称=fn 所触发的默认行为
	addEventListener绑定的事件需要通过event下面的preventDefault()
	滚轮的代码
/*document.cookie = 'username=leo;expires=' + oDate.toGMTString(); cooki

面向对象篇
这是很重要的一点，编程时务必要遵守。下文都遵循这一点，即如果替换了prototype对象，

    　　o.prototype = {};

那么，下一步必然是为新的prototype对象加上constructor属性，并将这个属性指回原来的构造函数。

    　　o.prototype.constructor = o;
详细的面向对象可以参考这个网页 http://www.ruanyifeng.com/blog/2010/05/object-oriented_javascript_encapsulation.html

闭包
//好处：
//1.希望一个变量长期驻扎在内存当中
//2.避免全局变量的污染
//3.私有成员的存在

//用法：
//1.模块化代码
/*for(var i=0;i<aLi.length;i++){
	
		
			aLi[i].onclick = (function(i){
			
				return function(){
					alert(i);	
				}
				
			})(i);

		
	}*/
	
//2.在循环中直接找到对应元素的索引
//IE下会引发内存泄漏

/*window.onload = function(){
	var oDiv = document.getElementById('div1');
	
	oDiv.onclick = function(){
		alert(oDiv.id);
	};
	
	window.onunload = function(){
		oDiv.onclick = null;
	};
	
};*/

window.onload = function(){
	var oDiv = document.getElementById('div1');
	
	var id = oDiv.id;
	
	oDiv.onclick = function(){
		alert(id);
	};
	
	oDiv = null;
	以上这两种方法可以解决ie内存泄漏的问题。













